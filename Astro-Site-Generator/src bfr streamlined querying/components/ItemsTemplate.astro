---
import { executeQuery } from "../utils/queries/executeQuery.js";

/**
 * ItemsTemplate.astro
 *
 * Props:
 * - collection: The name of the collection (optional but can be helpful if you still want it).
 * - ItemComponent: The Astro component used to render each item.
 * - queryName: The name of the query we want to run (string).
 * - columns: Number of items per row on large screens (default: 3).
 * - gap: Gap between items (default: '1.5rem').
 * - className: Additional class names for the container (optional).
 */

const {
  collection,
  ItemComponent,
  queryName,                // Pass this instead of a function
  columns = 3,
  gap = '1.5rem',
  className = '',
} = Astro.props;

if (!queryName || typeof queryName !== 'string') {
  throw new Error(`The "queryName" prop must be a non-empty string.`);
}

// 1) Use executeQuery to get items from your QUERIES
const items = await executeQuery(queryName);

// 2) Determine if there are items to display
const hasItems = Array.isArray(items) && items.length > 0;
---
{hasItems ? (
  <div class={`items-template ${className}`}>
    <div class="items-list">
      {items.map((item) => (
        <ItemComponent key={item.slug} {...item} collection={collection} />
      ))}
    </div>
  </div>
) : (
  <p class="no-items">No items available.</p>
)}

<style>
  .items-template {
    width: 100%;
  }

  .items-list {
    display: grid;
    grid-template-columns: repeat(${columns}, 1fr);
    gap: ${gap};
  }

  @media (max-width: 1024px) {
    .items-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (max-width: 600px) {
    .items-list {
      grid-template-columns: 1fr;
    }
  }

  .no-items {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 1rem 0;
  }
</style>
