---
import Layout from '../layouts/Layout.astro';
import SharedItemPage from '../components/SharedItemPage.astro';

import {
  generateSingleSegmentPaths,
  handleSingleSegmentRedirect,
} from '../utils/redirects';
import {
  getAvailableCollections,
  getCollectionItemPageData,
} from '../utils/collections';
import { collections } from '../content/config';

const { slug } = Astro.params;

/** 1) Build static paths for single-segment item routes + aliases */
export async function getStaticPaths() {
  return await generateSingleSegmentPaths();
}

// 2) Check if this slug is an old “redirectFrom” or a collection alias
const redirectResult = handleSingleSegmentRedirect(slug);
if (redirectResult && redirectResult !== null) {
  return Astro.redirect(redirectResult);
}

// 3) Otherwise, see if it belongs to a single-segment collection
let foundCollection = null;
let foundItem = null;

for (const colName of getAvailableCollections()) {
  const colObj = collections[colName];
  const maybeItem = colObj.data.find((itm) => itm.slug === slug);
  if (maybeItem) {
    foundCollection = colName;
    foundItem = maybeItem;
    break;
  }
}
if (!foundCollection || !foundItem) {
  return Astro.redirect("/404");
}

// If that collection is “two-segment”, we must redirect to /collection/slug
if (collections[foundCollection].metadata.collectionSlugInItem === true) {
  return Astro.redirect(`/${foundCollection}/${slug}`);
}

// 4) If we get here, it’s truly a single-segment item.
let pageData;
try {
  pageData = await getCollectionItemPageData(foundCollection, slug);
} catch (err) {
  console.error(err);
  return Astro.redirect("/404");
}

// 5) Extract fields for SEO
const { pageTitle, description, featuredImage } = pageData;
---
<Layout
  title={pageTitle}
  description={description}
  image={featuredImage}
  ogType="article"
>
  <SharedItemPage item={pageData} collection={foundCollection} />
</Layout>
