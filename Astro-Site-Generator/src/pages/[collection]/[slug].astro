---
import CollectionItemLayout from "../../layouts/CollectionItemLayout.astro";
import Section from "../../components/Section.astro";
import Image from "../../components/Image.astro";
import ContentTemplate from "../../components/ContentTemplate.astro";
import ItemsTemplate from "../../components/ItemsTemplate.astro";

import {
  getCollectionItemPageData,
  generateItemPaths,
  getAvailableCollections,
  fetchCollectionItems,
} from "../../utils/collections/";

// Components for rendering references
import ServiceCard from "../../components/ServiceCard.astro";
import CollectionCard from "../../components/CollectionsCard.astro";

/**
 * /[collection]/[slug].astro
 *
 * Handles two-segment routes like "/services/web-dev".
 * - Redirects to "/services/web-development" if "web-dev" is in `redirectFrom`.
 * - Displays the item page if the slug matches an actual item.
 * - Redirects to 404 if neither condition is met.
 */

// 1) Generate all necessary static paths, including `redirectFrom` slugs
export async function getStaticPaths() {
  // Base paths: actual item slugs
  const basePaths = await generateItemPaths();
  // e.g., { collection: "services", slug: "seo-optimization" }

  const extraPaths = [];

  // Add `redirectFrom` slugs
  for (const colName of getAvailableCollections()) {
    const items = await fetchCollectionItems(colName);
    for (const itm of items) {
      if (itm.redirectFrom && itm.redirectFrom.length) {
        for (const rSlug of itm.redirectFrom) {
          extraPaths.push({ params: { collection: colName, slug: rSlug } });
        }
      }
    }
  }

  // Combine and deduplicate paths
  const allPaths = [...basePaths, ...extraPaths];
  const uniquePaths = Array.from(
    new Set(allPaths.map((p) => `${p.params.collection}/${p.params.slug}`))
  ).map((path) => {
    const [collection, slug] = path.split("/");
    return { params: { collection, slug } };
  });

  return uniquePaths;
}

// 2) Handle the incoming request
const { collection, slug } = Astro.params;

let pageData;
try {
  // Attempt to fetch the actual item data
  pageData = await getCollectionItemPageData(collection, slug);
} catch (error) {
  // If not found, check if the slug is a `redirectFrom`
  const items = await fetchCollectionItems(collection);
  const redirectItem = items.find(
    (item) => item.redirectFrom && item.redirectFrom.includes(slug)
  );

  if (redirectItem) {
    // Redirect to the actual item's slug
    return Astro.redirect(`/${collection}/${redirectItem.slug}`);
  } else {
    // Redirect to the 404 page
    return Astro.redirect("/404");
  }
}

// 3) Render the item page if found
const { title, description, icon, featuredImage, pageTitle } = pageData;
---

<CollectionItemLayout
  title={pageTitle}
  description={description}
  image={featuredImage}
>
  <!-- Main Content Section -->
  <Section class="main-content">
    <article>
      <header>
        <h1>{icon || "ðŸ“„"} {title}</h1>
        <p>{description}</p>
        {
          featuredImage && (
            <Image
              src={featuredImage}
              alt={`${title} Featured Image`}
              class="item-image"
            />
          )
        }
      </header>
      <p>Additional item-specific content goes here...</p>
    </article>
  </Section>

  <!-- Related Services -->
  <Section class="related-services">
    <ContentTemplate collection="services">
      <ItemsTemplate
        collection="services"
        ItemComponent={ServiceCard}
        queryName="RelatedServices"
        slug={slug}
        currentCollection={collection}
        columns={3}
      />
    </ContentTemplate>
  </Section>

  <!-- Related Projects -->
  <Section class="related-projects">
    <ContentTemplate collection="projects">
      <ItemsTemplate
        collection="projects"
        ItemComponent={CollectionCard}
        queryName="RelatedProjects"
        slug={slug}
        currentCollection={collection}
        columns={3}
      />
    </ContentTemplate>
  </Section>

  <!-- Related Testimonials -->
  <Section class="related-testimonials">
    <ContentTemplate collection="testimonials">
      <ItemsTemplate
        collection="testimonials"
        ItemComponent={CollectionCard}
        queryName="RelatedTestimonials"
        slug={slug}
        currentCollection={collection}
        columns={3}
      />
    </ContentTemplate>
  </Section>
</CollectionItemLayout>

<style>
  .item-image {
    max-width: 100%;
    height: auto;
    margin-top: 1rem;
    border-radius: 4px;
  }
  .main-content {
    /* custom styles */
  }
  .related-services,
  .related-projects,
  .related-testimonials {
    margin-top: 3rem;
  }
</style>
