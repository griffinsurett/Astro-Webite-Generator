---
import CollectionLayout from "../../layouts/CollectionLayout.astro";
import Section from "../../components/Section.astro";
import ContentTemplate from "../../components/ContentTemplate.astro";
import ItemsTemplate from "../../components/ItemsTemplate.astro";
import CollectionsCard from "../../components/CollectionsCard.astro";

import { generateCollectionPaths } from "../../utils/collections";
import { getCollectionSections } from "../../utils/sections.js";
import { collections } from "../../content/config"; // If you want direct access to the collection object

const { collection } = Astro.params;

/** Build static paths for each collection that has hasPage = true */
export async function getStaticPaths() {
  return await generateCollectionPaths();
}

// 1. Grab the actual collection object from config
//    This gives us direct access to metadata fields like title, description, etc.
const colObj = collections[collection];
if (!colObj) {
  throw new Error(`Collection "${collection}" not found in config.`);
}

// 2. Extract relevant data (e.g. metadata) for the layout
const { title, description } = colObj.metadata;

// 3. Retrieve the sections array from metadata to define which content blocks appear
const sections = getCollectionSections(collection);
---
<CollectionLayout
  title={title}
  description={description}
>
  <!-- Optional: You can put a top-level “hero” area or heading here. -->
  <!-- E.g., <Section><h1>{title}</h1><p>{description}</p></Section> -->

  {sections.map((sec) => (
    <Section>
      <ContentTemplate collection={sec.collection}>
        <ItemsTemplate
          collection={sec.collection}
          queryName={sec.queryName}
          ItemComponent={CollectionsCard}
          /* If you need cross-collection references, pass currentCollection: */
          currentCollection={collection}
          columns={3}
          gap="1.5rem"
        />
      </ContentTemplate>
    </Section>
  ))}
</CollectionLayout>
