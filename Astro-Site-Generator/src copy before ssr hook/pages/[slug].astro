---
import { 
  getAvailableCollections, 
  fetchCollectionItems, 
  fetchCollectionItem 
} from "../utils/collections";

import {
  findCollectionRedirect,
  findItemRedirect,
  generateSingleRedirectPaths,
} from "../utils/redirects";

/**
 *  /[slug].astro
 *
 *  This route handles a single-segment URL like "/web-dev" or "/service".
 *  - If `slug` matches a collection's `redirectFrom`, redirect to "/collection".
 *  - If `slug` matches an item's actual slug, redirect to "/collection/item-slug".
 *  - If `slug` matches an item's `redirectFrom`, redirect to "/collection/item-slug".
 *  - Otherwise, 404.
 */

// 1) getStaticPaths: generate every possible single-segment path
export async function getStaticPaths() {
  const redirectPaths = await generateSingleRedirectPaths();
  return redirectPaths;
}

// 2) Route logic at runtime
const { slug } = Astro.params;

// Utilize the redirect utility functions

/** 3) Check if the slug is a collection redirect */
const collectionRedirect = findCollectionRedirect(slug);
if (collectionRedirect) {
  return Astro.redirect(`/${collectionRedirect}`);
}

/** 4) Check if the slug is an item-level redirectFrom */
const itemRedirect = findItemRedirect(null, slug);
if (itemRedirect) {
  return Astro.redirect(`/${itemRedirect.collection}/${itemRedirect.targetSlug}`);
}

/** 5) Check if the slug is an actual item slug */
for (const colName of getAvailableCollections()) {
  const foundItem = await fetchCollectionItem(colName, slug);
  if (foundItem) {
    return Astro.redirect(`/${colName}/${slug}`);
  }
}

/** 6) Otherwise, 404 */
return Astro.redirect("/404");
---

<!-- 
  No HTML is rendered. We only intercept single-segment slugs and do a redirect or 404.
-->