---
import { executeQuery } from "../utils/queries/";

const {
  collection,
  ItemComponent,
  queryName,
  items,           // <-- new optional prop
  columns = 3,
  gap = '1.5rem',
  className = '',
} = Astro.props;

// If `items` were passed directly, use them. Otherwise, run the query.
let finalItems = items;

if (!finalItems) {
  // If no items array is provided, we fall back to the existing query-based approach
  if (!queryName || typeof queryName !== 'string') {
    throw new Error(`Either "items" or a valid "queryName" must be provided.`);
  }
  finalItems = await executeQuery(queryName);
}

const hasItems = Array.isArray(finalItems) && finalItems.length > 0;
---
{hasItems ? (
  <div class={`items-template ${className}`}>
    <div class="items-list">
      {finalItems.map((item) => (
        <ItemComponent key={item.slug} {...item} collection={collection} />
      ))}
    </div>
  </div>
) : (
  <p class="no-items">No items available.</p>
)}

<style>
  .items-template {
    width: 100%;
  }
  .items-list {
    display: grid;
    grid-template-columns: repeat(${columns}, 1fr);
    gap: ${gap};
  }
  @media (max-width: 1024px) {
    .items-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (max-width: 600px) {
    .items-list {
      grid-template-columns: 1fr;
    }
  }
  .no-items {
    text-align: center;
    color: #666;
    font-style: italic;
    padding: 1rem 0;
  }
</style>
